import { IPPU } from '../api/ppu';
import { uint16, uint8 } from '../api/types';
import { IBus } from '../api/bus';
import { IInterrupt } from '../api/interrupt';
import { IMapper } from '../api/mapper';
export declare class PPU implements IPPU {
    private readonly onFrame;
    bus: IBus;
    mapper: IMapper;
    interrupt: IInterrupt;
    pixels: Uint8Array;
    oamMemory: Uint8Array;
    private controller;
    private mask;
    private register;
    private shiftRegister;
    private latchs;
    private status;
    private nmiDelay;
    private readBuffer;
    private frame;
    private scanLine;
    private cycle;
    private oamAddress;
    private secondaryOam;
    private spritePixels;
    private previousData;
    constructor(onFrame: (frame: Uint8Array) => void);
    clock(): void;
    cpuRead(address: uint16): uint8;
    cpuWrite(address: uint16, data: uint8): void;
    dmaCopy(data: Uint8Array): void;
    private writeCtrl;
    private readCtrl;
    private writeMask;
    private readMask;
    private readStatus;
    private writeOAMAddr;
    private readOAMData;
    private writeOAMData;
    private writeScroll;
    private writePPUAddr;
    private readPPUData;
    private writePPUData;
    private updateCycle;
    private fetchTileRelatedData;
    private fetchNameTable;
    private fetchAttributeTable;
    private fetchLowBackgroundTileByte;
    private fetchHighBackgroundTileByte;
    private loadBackground;
    private shiftBackground;
    private incrementHorizontalPosition;
    private incrementVerticalPosition;
    private copyHorizontalBits;
    private copyVerticalBits;
    private renderPixel;
    private clearSecondaryOam;
    private evalSprite;
    private fetchSprite;
}
